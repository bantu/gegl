static const char* texturize_canvas_cl_source =
"/* This file is an image processing operation for GEGL                        \n"
" *                                                                            \n"
" * GEGL is free software; you can redistribute it and/or                      \n"
" * modify it under the terms of the GNU Lesser General Public                 \n"
" * License as published by the Free Software Foundation; either               \n"
" * version 3 of the License, or (at your option) any later version.           \n"
" *                                                                            \n"
" * GEGL is distributed in the hope that it will be useful,                    \n"
" * but WITHOUT ANY WARRANTY; without even the implied warranty of             \n"
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          \n"
" * Lesser General Public License for more details.                            \n"
" *                                                                            \n"
" * You should have received a copy of the GNU Lesser General Public           \n"
" * License along with GEGL; if not, see <http://www.gnu.org/licenses/>.       \n"
" *                                                                            \n"
" * Copyright (C) 2014 Andreas Fischer (andreas.fischer@student.kit.edu)       \n"
" */                                                                           \n"
"                                                                              \n"
"__kernel void cl_texturize_canvas(__global const float *src,                  \n"
"                                  __global       float *dest,                 \n"
"                                  __global const float *texture,              \n"
"                                           const float mult,                  \n"
"                                           const int   xm,                    \n"
"                                           const int   ym,                    \n"
"                                           const int   offs,                  \n"
"                                           const int   components,            \n"
"                                           const int   has_alpha,             \n"
"                                           const int   roi_x,                 \n"
"                                           const int   roi_y,                 \n"
"                                           const int   roi_width)             \n"
"{                                                                             \n"
"  int buffer_index = get_global_id(0);                                        \n"
"  int color_index = buffer_index % (components + has_alpha);                  \n"
"  if (color_index < components)                                               \n"
"    {                                                                         \n"
"      int col_index = (buffer_index / (components + has_alpha)) % roi_width;  \n"
"      int row_index = (buffer_index / (components + has_alpha)) / roi_width;  \n"
"      int texture_index = ((roi_x + col_index) & 127) * xm +                  \n"
"                          ((roi_y + row_index) & 127) * ym +                  \n"
"                          offs;                                               \n"
"      float color = mult * texture [texture_index] + src [buffer_index];      \n"
"      dest [buffer_index] = clamp (color, 0.0f, 1.0f);                        \n"
"    }                                                                         \n"
"  else                                                                        \n"
"    {                                                                         \n"
"      // Copy alpha channel                                                   \n"
"      dest [buffer_index] = src [buffer_index];                               \n"
"    }                                                                         \n"
"}                                                                             \n"
;
